- hosts: all
  vars:
    user: changeme
  tasks:
    - name: Installing nginx
      apt:
        name: nginx
        state: latest

    - name: Starting nginx
      service:
        name: nginx
        state: started
        enabled: true
    
    - name: Installing postgres
      apt:
        name: postgresql
        state: latest
    
    - name: Installing PostGIS
      apt:
        name: postgresql-11-postgis-2.5
        #state: latest
    
    - name: Starting postgres
      service:
        name: postgresql
        state: started
        enabled: true
    
    - name: Postgresql allowing remote connections ipv4
      lineinfile:
        path: /etc/postgresql/11/main/pg_hba.conf 
        regexp: '^host(.*)(all)(.*)(all)(.*)(127.0.0.1/32)(.*)$'
        line: 'host\1\2\3\4\5 0.0.0.0/0 \7'
        backrefs: yes
    
    - name: Postgresql allowing remote connections ipv6
      lineinfile:
        path: /etc/postgresql/11/main/pg_hba.conf 
        regexp: '^host(.*)(all)(.*)(all)(.*)(::1/128)(.*)$'
        line: 'host\1\2\3\4\5::0/0\7'
        backrefs: yes
    
    - name: Postgresql listen on all IP
      lineinfile:
        path: /etc/postgresql/11/main/postgresql.conf
        regexp: ^\# (listen_addresses = \')(localhost)(\'.*)$
        line: '\1*\3'
        backrefs: yes
    
    - name: Installing python psycopg2
      apt:
        name: python-psycopg2
        state: latest
    
    - name: Create oskari user, set password oskari, grant superuser
      become: yes
      become_user: postgres
      postgresql_user:
        name: oskari
        # command to encrypt password echo -n oskari | md5sum
        password: oskari
        role_attr_flags: SUPERUSER,LOGIN,CREATEDB
        expires: infinity
        encrypted: true
        state: present
    
    - name: Create UPT UP database
      vars:
        clave: oskari
      postgresql_db:
        name: upt_up
        login_user: oskari
        login_password: "{{ clave }}"
        login_host: localhost

    - name: Create PostGIS on UPT UP database
      vars:
        clave: oskari
      postgresql_ext:
        name: postgis
        db: upt_up
        login_user: oskari
        login_password: "{{ clave }}"
        login_host: localhost
    
    - name: Create UPT Distance database
      vars:
        clave: oskari
      postgresql_db:
        name: upt_distance
        login_user: oskari
        login_password: "{{ clave }}"
        login_host: localhost

    - name: Create PostGIS on UPT Distance database
      vars:
        clave: oskari
      postgresql_ext:
        name: postgis
        db: upt_distance
        login_user: oskari
        login_password: "{{ clave }}"
        login_host: localhost

    - name: Installing python 3
      apt:
        name: python3
        state: latest
    
    - name: Installing python 3 dev
      apt:
        name: python3-dev
        state: latest
    
    - name: Installing uwsgi
      apt:
        name: uwsgi
        state: latest
    
    - name: Installing uwsgi-plugin-python3
      apt:
        name: uwsgi-plugin-python3
        state: latest
    
    - name: Installing GCC
      apt:
        name: gcc
        state: latest

    - name: Installing virtualenv
      apt:
        name: virtualenv
        state: latest

    - name: Creating virtualenv for python3
      command:
        cmd: virtualenv /home/{{ user }}/python3 -p python3
        creates: "/home/{{ user }}/python3"
    
    - name: Copying requirements file
      copy:
        src: pltools/requirements.txt
        dest: /home/{{ user }}/python3/

    - name: Installing requirements
      pip: 
        requirements=/home/{{ user }}/python3/requirements.txt 
        virtualenv=/home/{{ user }}/python3
    
    # execute with -e "githubuser=arbabname" -e "githubpassword=xxxxxxx"
    - name: Cloning UP repository
      git: 
        #repo: https://{{ gituser | urlencode }}:{{ gitpassword | urlencode }}@github.com/miguel-capsus/UPT-UrbanPerformance.git
        repo: https://github.com/UPTechMx/UPT-UrbanPerformance.git
        dest: /home/{{ user }}/upt-up
        clone: yes

    - name: Cloning ST repository
      git: 
        #repo: https://{{ gituser | urlencode }}:{{ gitpassword | urlencode }}@github.com/miguel-capsus/UPT-Distance-Module.git
        repo: https://github.com/UPTechMx/UPT-Distance-Module.git
        dest: /home/{{ user }}/upt-distance
        clone: yes
    
    - name: Create services script directory
      file:
        path: /home/{{ user }}/upt_scripts
        state: directory
        mode: '0755'

    - name: Creating script for UPT Distances
      template:
        src: pltools/UPT-Distance.j2
        dest: /home/{{ user }}/upt_scripts/upt-distance.sh
        mode: 0100
    
    - name: Creating script for UPT UP
      template:
        src: pltools/UPT-UP.j2
        dest: /home/{{ user }}/upt_scripts/upt-up.sh
        mode: 0100
    
    - name: Creating script for UPT Distances
      template:
        src: pltools/UPT-CeleryDistance.j2
        dest: /home/{{ user }}/upt_scripts/upt-celery-distance.sh
        mode: 0100
    
    - name: Creating script for UPT UP
      template:
        src: pltools/UPT-CeleryUP.j2
        dest: /home/{{ user }}/upt_scripts/upt-celery-up.sh
        mode: 0100
    
    - name: Creating Service for UPT Distance
      template:
        src: pltools/UPT-DistanceService.j2
        dest:  /etc/systemd/system/upt-distance.service
        mode: 0755
    
    - name: Creating Service for UPT UP
      template:
        src: pltools/UPT-UPService.j2
        dest:  /etc/systemd/system/upt-up.service
        mode: 0755
    
    - name: Creating Service for UPT Celery Distance
      template:
        src: pltools/UPT-CeleryDistanceService.j2
        dest:  /etc/systemd/system/upt-celery-distance.service
        mode: 0755
    
    - name: Creating Service for UPT Celery UP
      template:
        src: pltools/UPT-CeleryUPService.j2
        dest:  /etc/systemd/system/upt-celery-up.service
        mode: 0755

    - name: Create Distance .env file
      copy:
        src: pltools/Distance.env
        dest: /home/{{ user }}/upt-distance/ST/.env

    - name: Create UP .env file
      copy:
        src: pltools/UP.env
        dest: /home/{{ user }}/upt-up/UP/.env

    - name: Initializing UPT Distance database
      shell: cd /home/{{ user }}/upt-distance/ && source /home/{{ user }}/python3/bin/activate && python manage.py makemigrations plst && python manage.py migrate
      args:
        executable: /bin/bash
    
    - name: Create stored producedure for distances
      vars:
        clave: oskari
      shell: PGPASSWORD={{ clave }} psql -d upt_distance < /home/{{ user }}/upt-distance/plst/indicators/AmenitiesDistance/st_indicator_mmu_amenities_distance.sql
      args:
        executable: /bin/bash
      become: true
      become_user: postgres
    
    - name: Initializing UPT UP database
      shell: cd /home/{{ user }}/upt-up/ && source /home/{{ user }}/python3/bin/activate && python manage.py makemigrations plup && python manage.py migrate
      args:
        executable: /bin/bash

    - name: Enabling UPT Distance service
      shell: systemctl enable upt-distance.service && service upt-distance restart
    
    - name: Enabling UPT UP service
      shell: systemctl enable upt-up.service && service upt-up restart
    
    - name: Enabling UPT Celery Distance service
      shell: systemctl enable upt-celery-distance.service && service upt-celery-distance restart
    
    - name: Enabling UPT Celery UP service
      shell: systemctl enable upt-celery-up.service && service upt-celery-up restart
